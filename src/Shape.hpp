#ifndef SHAPE_INCLUDE
#define SHAPE_INCLUDE

///////////////////////////////////////////
// Headers
///////////////////////////////////////////
#include "Point2.hpp"
#include "Line.hpp"
#include <vector>
#include <set>

///////////////////////////////////////////
/// \brief Base class for working with geometric shapes
///
///////////////////////////////////////////
class Shape
{
public:
	///////////////////////////////////////////
	/// \brief Default constructor
	/// 
	///////////////////////////////////////////
	Shape();

	///////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param vertices All vertices of the shape
	///
	///////////////////////////////////////////
	Shape(const std::vector<Point2>& vertices);

	///////////////////////////////////////////
	/// \brief Virtual destructor
	///
	///////////////////////////////////////////
	~Shape() {};

	////////////////////////////////////////////////////////////
	/// \brief Get all the intersection points
	///
	/// Between some points there may be a segment that is completely
	/// in contact with the side of the polygon.
	/// 
	/// \param shape Shape with which the intersection will be checked
	/// 
	/// \return std::set filled with all found points
	/// 
	////////////////////////////////////////////////////////////
	std::set<Point2> checkCollision(const Shape& shape) const;

	////////////////////////////////////////////////////////////
	/// \brief Vertex count
	///
	/// \return Number of vertices in the array
	///
	////////////////////////////////////////////////////////////
	std::size_t getVertexCount() const;

	////////////////////////////////////////////////////////////
	/// \brief Add new point to shape
	///
	////////////////////////////////////////////////////////////
	void add(const Point2& point);

	////////////////////////////////////////////////////////////
	const Point2& at(std::size_t index) const;

	////////////////////////////////////////////////////////////
	Point2& at(std::size_t index);

private:
	///////////////////////////////////////////
	// Member data
	///////////////////////////////////////////
	std::vector<Point2> m_vertices; //!< Points of shape
};

#endif // SHAPE_INCLUDE